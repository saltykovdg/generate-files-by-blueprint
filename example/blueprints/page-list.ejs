// Import Components
import <%= helpers.pascalCase(name) %>List from './../components/<%= helpers.pascalCase(name) %>List';

// Import Actions
import * as <%= helpers.pascalCase(name) %>Action from './../actions/<%= helpers.pascalCase(name) %>Action';

// Import Selectors
import {
  get<%= helpers.pascalCase(name) %>ListData,
  get<%= helpers.pascalCase(name) %>IsLoading,
  get<%= helpers.pascalCase(name) %>IsRequestError,
  get<%= helpers.pascalCase(name) %>IsDeleted,
} from './../reducers/<%= helpers.pascalCase(name) %>Reducer';

class <%= helpers.pascalCase(name) %>ListPage extends Component {
  onChangePage = (page) => {
    this.setState({ page });
    this.props.dispatch(<%= helpers.pascalCase(name) %>Action.get<%= helpers.pascalCase(name) %>s(page));
  };
  onDelete = (object) => {
    this.props.dispatch(<%= helpers.pascalCase(name) %>Action.delete<%= helpers.pascalCase(name) %>(object, this.getActualPageAfterDelete()));
  };
  render() {
    return (
      <<%= helpers.pascalCase(name) %>List
        data={this.props.data}
        isLoading={this.props.isLoading}
        isRequestError={this.props.isRequestError}
        isDeleted={this.props.isDeleted}
        onChangePage={this.onChangePage}
        onDelete={this.onDelete}
      />
    );
  }
}

// Retrieve data from store as props
function mapStateToProps(state) {
  return {
    data: get<%= helpers.pascalCase(name) %>ListData(state),
    isLoading: get<%= helpers.pascalCase(name) %>IsLoading(state),
    isRequestError: get<%= helpers.pascalCase(name) %>IsRequestError(state),
    isDeleted: get<%= helpers.pascalCase(name) %>IsDeleted(state),
  };
}

export default connect(mapStateToProps)(<%= helpers.pascalCase(name) %>ListPage);
