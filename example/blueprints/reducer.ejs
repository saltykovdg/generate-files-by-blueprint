// Generated code for <%= helpers.pascalCase(parent) %>Reducer
/*
import {
  <%= helpers.camelCase(name) %>Reducer,
  get<%= helpers.pascalCase(name) %>IsLoading,
  get<%= helpers.pascalCase(name) %>IsRequestError,
} from './reducers/<%= helpers.pascalCase(name) %>Reducer';

const initialState = {
  <%= helpers.camelCase(name) %>: data,
};

const <%= helpers.pascalCase(parent) %>Reducer = (state = initialState, action) => {
  return {
    <%= helpers.camelCase(name) %>: <%= helpers.camelCase(name) %>Reducer(state, action),
  };
};

export const getIsRequestError = state => get<%= helpers.pascalCase(name) %>IsRequestError(state);
export const getIsLoading = state => get<%= helpers.pascalCase(name) %>IsLoading(state);
*/

import * as <%= helpers.pascalCase(name) %>Action from './../actions/<%= helpers.pascalCase(name) %>Action';
import {
  prepareListLoading,
  prepareEditLoading,
  prepareSuccess,
  prepareListFailed,
  prepareEditFailed,
  prepareSaveSuccess,
  prepareDeleteSuccess,
} from 'ReducerUtil';

const emptyEditData = {
  id: '',
  name: '',
};

export const <%= helpers.camelCase(name) %>Reducer = (state, action) => {
  switch (action.type) {
    case <%= helpers.pascalCase(name) %>Action.GET_<%= helpers.constantCase(name) %>: {
      return prepareEditLoading(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }
    case <%= helpers.pascalCase(name) %>Action.SAVE_<%= helpers.constantCase(name) %>: {
      return prepareEditLoading(state.<%= helpers.camelCase(name) %>.list.data, state.<%= helpers.camelCase(name) %>.edit.data);
    }
    case <%= helpers.pascalCase(name) %>Action.FIND_<%= helpers.constantCase(name) %>S_BY_NAME:
    case <%= helpers.pascalCase(name) %>Action.GET_<%= helpers.constantCase(name) %>S:
    case <%= helpers.pascalCase(name) %>Action.DELETE_<%= helpers.constantCase(name) %>: {
      return prepareListLoading(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }

    case <%= helpers.pascalCase(name) %>Action.GET_<%= helpers.constantCase(name) %>_SUCCESS: {
      return prepareSuccess(state.<%= helpers.camelCase(name) %>.list.data, action.data);
    }
    case <%= helpers.pascalCase(name) %>Action.GET_<%= helpers.constantCase(name) %>S_SUCCESS: {
      return prepareSuccess(action.data, emptyEditData);
    }

    case <%= helpers.pascalCase(name) %>Action.GET_<%= helpers.constantCase(name) %>_FAILED: {
      return prepareEditFailed(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }
    case <%= helpers.pascalCase(name) %>Action.GET_<%= helpers.constantCase(name) %>S_FAILED: {
      return prepareListFailed(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }

    case <%= helpers.pascalCase(name) %>Action.SAVE_<%= helpers.constantCase(name) %>_SUCCESS: {
      return prepareSaveSuccess(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }
    case <%= helpers.pascalCase(name) %>Action.DELETE_<%= helpers.constantCase(name) %>_SUCCESS: {
      return prepareDeleteSuccess(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }

    case <%= helpers.pascalCase(name) %>Action.SAVE_<%= helpers.constantCase(name) %>_FAILED: {
      return prepareEditFailed(state.<%= helpers.camelCase(name) %>.list.data, state.<%= helpers.camelCase(name) %>.edit.data);
    }
    case <%= helpers.pascalCase(name) %>Action.DELETE_<%= helpers.constantCase(name) %>_FAILED: {
      return prepareListFailed(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }

    case <%= helpers.pascalCase(name) %>Action.NEW_<%= helpers.constantCase(name) %>: {
      return prepareSuccess(state.<%= helpers.camelCase(name) %>.list.data, emptyEditData);
    }

    default:
      return state.<%= helpers.camelCase(name) %>;
  }
};

/* Selectors */
export const get<%= helpers.pascalCase(name) %>EditData = state => state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.edit.data;
export const get<%= helpers.pascalCase(name) %>ListData = state => state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.list.data;
export const get<%= helpers.pascalCase(name) %>IsLoading = state => state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.list.isLoading || state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.edit.isLoading;
export const get<%= helpers.pascalCase(name) %>IsRequestError = state => state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.list.isRequestError || state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.edit.isRequestError;
export const get<%= helpers.pascalCase(name) %>IsSaved = state => state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.isSaved;
export const get<%= helpers.pascalCase(name) %>IsDeleted = state => state.<%= helpers.lowerCase(parent) %>.<%= helpers.camelCase(name) %>.isDeleted;
